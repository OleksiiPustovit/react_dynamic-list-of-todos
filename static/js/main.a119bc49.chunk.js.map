{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","selectedTodoId","className","map","id","title","completed","classNames","type","onClick","TodoFilter","value","setValue","text","setText","onChange","event","currentTarget","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","todoId","useState","user","setUser","todoOpen","setTodoOpen","currentTodo","find","todo","useEffect","userId","response","href","email","name","App","setTodos","setTodoId","loader","setLoader","filterByValue","setFilterByValue","filterByText","setFilterByText","filteredTodos","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a119bc49.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: (argument: number) => number | void;\n  selectedTodoId: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  selectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({ id, title, completed }) => {\n          const handleSelect = () => {\n            return selectedTodoId === id\n              ? selectedTodo(0)\n              : selectedTodo(id);\n          };\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              key={id}\n              className=\"\"\n            >\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span\n                    className=\"icon\"\n                    data-cy=\"iconCompleted\"\n                  >\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td\n                className=\"is-vcentered is=expanded\"\n              >\n                <p\n                  className={classNames({\n                    'has-text-danger': completed,\n                    'has-text-success': !completed,\n                  })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td\n                className=\"has-text-right is-vcentered\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  data-cy=\"selectButton\"\n                  onClick={handleSelect}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={classNames({\n                        'far fa-eye-slash': selectedTodoId === id,\n                        'far fa-eye': selectedTodoId !== id,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { ChangeEvent } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  value: string;\n  setValue: (argument: string) => void;\n  text: string;\n  setText: (argument: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  value,\n  setValue,\n  text,\n  setText,\n}) => {\n  const handleChangeValue = (event: ChangeEvent<HTMLSelectElement>) => {\n    setValue(event.currentTarget.value);\n  };\n\n  const handleChangeText = (event:\n  ChangeEvent<HTMLInputElement>) => {\n    setText(event.currentTarget.value);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={value}\n            onChange={handleChangeValue}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          data-cy=\"searchInput\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={text}\n          onChange={handleChangeText}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        <span\n          className=\"icon is-right\"\n          style={{ pointerEvents: 'all' }}\n        >\n          {text !== '' && (\n            <>\n              <button\n                type=\"button\"\n                data-cy=\"clearSearchButton\"\n                className=\"delete\"\n                onClick={() => setText('')}\n                aria-label=\"Clear search query\"\n              />\n            </>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  todoId: number;\n  todos: Todo[];\n  selectedTodo: (argument: number) => number | void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  todoId,\n  todos,\n  selectedTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [todoOpen, setTodoOpen] = useState(true);\n  const currentTodo = todos.find(todo => todo.id === todoId);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(response => setUser(response));\n    }\n  }, []);\n\n  if (todoOpen === false) {\n    return null;\n  }\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todoId}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"close\"\n              onClick={() => {\n                setTodoOpen(false);\n                selectedTodo(0);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!currentTodo?.completed\n                ? (<strong className=\"has-text-danger\">Planned</strong>)\n                : (<strong className=\"has-text-success\">Done</strong>)}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useState, useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoId, setTodoId] = useState<number>(0);\n  const [loader, setLoader] = useState<boolean>(false);\n  const [filterByValue, setFilterByValue] = useState<string>('all');\n  const [filterByText, setFilterByText] = useState<string>('');\n\n  useEffect(() => {\n    getTodos()\n      .then(response => {\n        setTodos(response);\n        setLoader(true);\n      });\n  }, []);\n\n  const filteredTodos = todos.filter(todo => {\n    switch (filterByValue) {\n      case 'active':\n        return !todo.completed;\n\n      case 'completed':\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  }).filter(todo => {\n    return todo.title.toLowerCase().includes(filterByText.toLowerCase());\n  });\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                todos={todos}\n                value={filterByValue}\n                text={filterByText}\n                setValue={setFilterByValue}\n                setText={setFilterByText}\n              />\n            </div>\n\n            <div className=\"block\">\n              { !loader ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodoId={todoId}\n                  selectedTodo={(todo) => setTodoId(todo)}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {todoId !== 0 && (\n        <TodoModal\n          todoId={todoId}\n          todos={todos}\n          selectedTodo={(todo) => setTodoId(todo)}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}